module netgate-route-table {

    yang-version 1.1;

    namespace "urn:netgate:xml:yang:netgate-route-table";
    prefix "ngrttab";

    import ietf-inet-types {
	prefix "inet";
    }

    import netgate-common {
	prefix "ngcom";
    }

    organization "Netgate";

    contact "Web: <http://www.netgate.com>";

    description
	"This YANG module provides a Netgate-defined data-model
	 for Route Tables.

	 Copyright 2017-2020 Rubicon Communications, LLC.";

    revision 2020-07-15 {
	description
	    "TNSR Release 20.07.";
    }

    revision 2020-06-15 {
	description
	    "TNSR Release 20.06.";
    }

    revision 2020-02-15 {
	description
	    "TNSR Release 20.02.";
    }

    revision 2019-02-15 {
	description
	    "TNSR Release 19.02.";
    }

    revision 2017-08-26 {
	description
	    "Initial Revision.";
    }


    rpc route-lookup {
        input {
            leaf table-name {
		type ngcom:rt-identifier-63;
		description
		    "The name of a Route Table.";
                mandatory true;
            }

            leaf prefix {
		type inet:ip-prefix;
		description
		    "A prefix to lookup.";
                mandatory true;
            }

            leaf exact {
		type boolean;
		description
		    "If present and true, the lookup must match exactly.";
            }
        }

        output {
	    container route {
		description
		    "Route matching prefix lookup.";

		leaf table-name {
		    type string;
		    description
			"Name of the route table containing the route.";
		}

		leaf destination-prefix {
		    type inet:ip-prefix;
		    description
			"IP destination prefix";
		}

		leaf priority {
		    type uint8;
		    description
			"Administrative distance preference.";
		}

		container paths {

		    list path {
			key path-id;

			leaf path-id {
			    type uint32;
			}

			leaf if-name {
			    type string;
			    description
				"Name of the interface.";
			}

			leaf ip-address {
			    type inet:ip-address-no-zone;
			    description
				"The next hop IP address.";
			}

			leaf weight {
			    type uint8;
			    description
				"Multipath route weight.";
			}

			leaf drop {
			    type boolean;
			    description
				"Drop the packet.";
			}

			leaf local {
			    type boolean;
			    description
				"Receive the packet locally.";
			}

			leaf null-send-unreach {
			    type boolean;
			    description
				"Drop packet with an 'unreachable' reply.";
			}

			leaf null-send-prohibit {
			    type boolean;
			    description
				"Drop packet with a 'prohibited' reply.";
			}
		    }
		}
	    }
        }
    }


    container route-table-config {
	description
	    "Route Table define a set of static IPv4 and IPv6 routes.";

	container static-routes {
	    description
		"Static routes.";

	    list route-table {
		key "name";
		description
		    "Route table entries are indexed by their name.
		     Table names are unique across all address families.";

		leaf name {
		    type ngcom:rt-identifier-15;
		    description
			"The name of a Route Table.";
		}

		leaf address-family {
		    type ngcom:ip-address-family;
		    description
			"The address family in this route table.
			 One of 'ipv4' or 'ipv6'.";
		}

		leaf description {
		    type string;
		    description
			"A description of the route table.";
		}

		leaf id {
		    type uint32;
		    description
			"Numeric VRF table ID. " +
			"The value 0 is used by default tables";
		    default 0;
		}

		container ipv4-routes {
		    description
			"List of IPv4 routes by destination prefix.";

		    list route {
			key "destination-prefix";
			description
			    "Routes are index by their destination.";

			leaf destination-prefix {
			    type inet:ipv4-prefix;
			    description
				"IPv4 destination prefix";
			}

			leaf description {
			    type ngcom:description-63;
			    description
				"A description of the route.";
			}

			leaf priority {
			    type uint8;
			    description
				"Administrative distance
				preference.";
			}


			container next-hop {
			    description
				"Next-hop configuration.";

			    list hop {
				key "hop-id";
				description
				    "A list of next-hops.";

				leaf hop-id {
				    type uint32;
				    description
					"A unique identifier for
					 each next-hop.";
				}

				leaf ipv4-address {
				    type inet:ipv4-address;
				    description
					"The next hop IPv4 address.";
				}

				leaf if-name {
				    type ngcom:if-identifier-63;
				    description
					"The next hop interface name.";
				}

				leaf next-hop-table-name {
				    type ngcom:rt-identifier-63;
				    description
					"The next hop route table name.";
				}

				leaf classify-table-name {
				    type string;
				    description
					"Use the given Classify Table
					 name as the next hop.";
				}

				leaf weight {
				    type uint8 {
					range "1..255";
				    }
				    description
					"Multipath route weight.";
				}

				leaf drop {
				    type boolean;
				    description
					"Drop the packet.";
				}

				leaf local {
				    type boolean;
				    description
					"Receive the packet locally.";
				}

				leaf null-send-unreach {
				    type boolean;
				    description
					"Drop packet with an
					 'unreachable' reply.";
				}

				leaf null-send-prohibit {
				    type boolean;
				    description
					"Drop packet with a
					 'prohibited' reply.";
				}

				leaf resolve-host {
				    type boolean;
				    description
					"Resolve host";
				}

				leaf resolve-attached {
				    type boolean;
				    description
					"Resolve attached";
				}

			    }
			}

		    }
		}

		container ipv6-routes {
		    description
			"List of IPv6 routes by destination prefix.";

		    list route {
			key "destination-prefix";
			description
			    "Routes are index by their destination.";

			leaf destination-prefix {
			    type inet:ipv6-prefix;
			    description
				"IPv6 destination prefix";
			}

			leaf description {
			    type string;
			    description
				"A description of the route.";
			}

			leaf priority {
			    type uint8;
			    description
				"Administrative distance
				preference.";
			}

			container next-hop {
			    description
				"Next-hop configuration.";

			    list hop {
				key "hop-id";
				description
				    "A list of next-hops.";

				leaf hop-id {
				    type uint32;
				    description
					"A unique identifier for
					 each next-hop.";
				}

				leaf ipv6-address {
				    type inet:ipv6-address;
				    description
					"The next hop IPv6 address.";
				}

				leaf if-name {
				    type ngcom:if-identifier-63;
				    description
					"The next hop interface name.";
				}

				leaf next-hop-table-name {
				    type string;
				    description
					"The next hop route table name.";
				}

				leaf classify-table-name {
				    type string;
				    description
					"Use the given Classify Table
					 name as the next hop.";
				}

				leaf weight {
				    type uint8 {
					range "1..255";
				    }
				    description
					"Multipath route weight.";
				}

				leaf drop {
				    type boolean;
				    description
					"Drop the packet.";
				}

				leaf local {
				    type boolean;
				    description
					"Receive the packet locally.";
				}

				leaf null-send-unreach {
				    type boolean;
				    description
					"Drop packet with an
					 'unreachable' reply.";
				}

				leaf null-send-prohibit {
				    type boolean;
				    description
					"Drop packet with a
					 'prohibited' reply.";
				}

				leaf resolve-host {
				    type boolean;
				    description
					"Resolve host";
				}

				leaf resolve-attached {
				    type boolean;
				    description
					"Resolve attached";
				}
			    }
			}
		    }
		}
	    }
	}
    }

    container route-table-state {
	config "false";

	description
	    "Route Table define a set of static IPv4 and IPv6 routes.";

	container static-routes {
	    description
		"Static routes.";

	    list route-table {
		key "name";
		description
		    "Route table entries are indexed by their name.
		     Table names are unique across all address families.";

		leaf name {
		    type ngcom:rt-identifier-63;
		    description
			"The name of a Route Table.";
		}

		leaf address-family {
		    type ngcom:ip-address-family;
		    description
			"The address family in this route table.
			 One of 'ipv4' or 'ipv6'.";
		}

		leaf description {
		    type string;
		    description
			"A description of the route table.";
		}

		leaf id {
		    type uint32;
		    description
			"Numeric VRF table ID" +
			"The value 0 is used by default tables";
		    default 0;
		}

		container ipv4-routes {
		    description
			"List of IPv4 routes by destination prefix.";

		    list route {
			key "destination-prefix";
			description
			    "Routes are index by their destination.";

			leaf destination-prefix {
			    type inet:ipv4-prefix;
			    description
				"IPv4 destination prefix";
			}

			leaf description {
			    type string;
			    description
				"A description of the route.";
			}

			leaf priority {
			    type uint8;
			    description
				"Administrative distance
				preference.";
			}

			container next-hop {
			    description
				"Next-hop configuration.";

			    list hop {
				key "hop-id";
				description
				    "A list of next-hops.";

				leaf hop-id {
				    type uint32;
				    description
					"A unique identifier for
					 each next-hop.";
				}

				leaf ipv4-address {
				    type inet:ipv4-address;
				    description
					"The next hop IPv4 address.";
				}

				leaf if-name {
				    type ngcom:if-identifier-63;
				    description
					"The next hop interface name.";
				}

				leaf next-hop-table-name {
				    type ngcom:rt-identifier-63;
				    description
					"The next hop route table name.";
				}

				leaf classify-table-name {
				    type string;
				    description
					"Use the given Classify Table
					 name as the next hop.";
				}

				leaf weight {
				    type uint8;
				    description
					"Multipath route weight.";
				}

				leaf drop {
				    type boolean;
				    description
					"Drop the packet.";
				}

				leaf local {
				    type boolean;
				    description
					"Receive the packet locally.";
				}

				leaf null-send-unreach {
				    type boolean;
				    description
					"Drop packet with an
					 'unreachable' reply.";
				}

				leaf null-send-prohibit {
				    type boolean;
				    description
					"Drop packet with a
					 'prohibited' reply.";
				}

				leaf resolve-host {
				    type boolean;
				    description
					"Resolve host";
				}

				leaf resolve-attached {
				    type boolean;
				    description
					"Resolve attached";
				}

			    }
			}

		    }
		}

		container ipv6-routes {
		    description
			"List of IPv6 routes by destination prefix.";

		    list route {
			key "destination-prefix";
			description
			    "Routes are index by their destination.";

			leaf destination-prefix {
			    type inet:ipv6-prefix;
			    description
				"IPv6 destination prefix";
			}

			leaf description {
			    type string;
			    description
				"A description of the route.";
			}

			leaf priority {
			    type uint8;
			    description
				"Administrative distance
				preference.";
			}

			container next-hop {
			    description
				"Next-hop configuration.";

			    list hop {
				key "hop-id";
				description
				    "A list of next-hops.";

				leaf hop-id {
				    type uint32;
				    description
					"A unique identifier for
					 each next-hop.";
				}

				leaf ipv6-address {
				    type inet:ipv6-address;
				    description
					"The next hop IPv6 address.";
				}

				leaf if-name {
				    type ngcom:if-identifier-63;
				    description
					"The next hop interface name.";
				}

				leaf next-hop-table-name {
				    type string;
				    description
					"The next hop route table name.";
				}

				leaf classify-table-name {
				    type string;
				    description
					"Use the given Classify Table
					 name as the next hop.";
				}

				leaf weight {
				    type uint8;
				    description
					"Multipath route weight.";
				}

				leaf drop {
				    type boolean;
				    description
					"Drop the packet.";
				}

				leaf local {
				    type boolean;
				    description
					"Receive the packet locally.";
				}

				leaf null-send-unreach {
				    type boolean;
				    description
					"Drop packet with an
					 'unreachable' reply.";
				}

				leaf null-send-prohibit {
				    type boolean;
				    description
					"Drop packet with a
					 'prohibited' reply.";
				}

				leaf resolve-host {
				    type boolean;
				    description
					"Resolve host";
				}

				leaf resolve-attached {
				    type boolean;
				    description
					"Resolve attached";
				}
			    }
			}
		    }
		}
	    }
	}
    }
}
