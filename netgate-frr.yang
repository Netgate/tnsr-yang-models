/*
 * Copyright 2019, Rubicon Communications LLC
 */

module netgate-frr {

    namespace "urn:netgate:xml:yang:netgate-frr";
    prefix "ngfrr";

    import ietf-inet-types {
	prefix "inet";
    }

    import netgate-common {
	prefix "ngcom";
    }

    import netgate-bgp {
	prefix "ngbgp";
    }

    import netgate-frr-types {
	prefix "frr";
    }

    import netgate-interface {
	prefix "ngif";
    }

    import netgate-route {
	prefix "ngrt";
    }

    organization "Netgate";

    contact "Web: <http://www.netgate.com>";

    description
	"This YANG module provides a Netgate-defined data-model
	 for FRR data.

	 Copyright 2017-2019 Rubicon Communications, LLC.
	 ";

    revision 2019-08-30 {
	description
	    "TNSR Release 19.08.";
    }

    revision 2019-05-30 {
	description
	    "TNSR Release 19.05.";
    }

    revision 2019-02-15 {
	description
	    "TNSR Release 19.02.";
    }

    revision 2019-01-15 {
	description
	    "Reorganize model to isolate routing service.";
    }

    revision 2017-11-01 {
	description
	    "Initial revision.";
    }


    typedef zebra-packet-send-recv {
	type enumeration {
	    enum send {
		description
		    "If specified, only sent packets are requested.";
	    }

	    enum recv {
		description
		    "If specified, only received  packets are requested.";
	    }
	}
    }


    grouping zebra-packet-send-recv {
	description
	    "Packet debug flags can specify a either a 'send' or
	     a 'recv' direction limiter, or if absent, both.";

	leaf direction {
	    type zebra-packet-send-recv;
	    description
		"Debug packets sent or received.
		Missing is both.";
	}
    }

    grouping zebra-packet-send-recv-detail {
	description
	    "Packet debug flags can specify a either a 'send' or
	     a 'recv' direction limiter, or if absent, both.
	     In addition a 'detail' flag may be requested.";

	leaf direction {
	    type zebra-packet-send-recv;
	    description
		"Debug packets sent or received.
		Missing is both.";
	}

	leaf detail {
	    type boolean;
	    description
		"Debug packets in detail.";
	}
    }


    rpc frr-control {
	input {
	    leaf operation {
		mandatory true;
		type ngcom:service-operation;
		description
		    "One of the strings 'start', 'stop', 'restart',
		     or 'status'.";
	    }
	    leaf option {
		type string;
		description
		    "Option on operation";
	    }
	    leaf frr-service {
		type string;
	    }
	}
	output {
	    leaf stdout {
		type string;
	    }
	}
    }

    rpc frr-coredump {
	input {
	    leaf operation {
		mandatory true;
		type ngcom:service-op-enable-disable;
		description
		    "One of the strings 'enable', or 'disable'.";
	    }
	}
	output {
	    leaf stdout {
		type string;
	    }
	}
    }


    augment "/ngrt:route-config/ngrt:dynamic" {

	container access-lists {
	    description
		"Table of Access Lists, indexed by name.  Each entry
		 contains a set of rules ordered by sequence number.";

	    list list {
		key "name";
		description
		    "Access List name.";

		leaf name {
		    type string;
		    mandatory true;
		    description
			"The Access List name as supplied by the developer.
			 It is a unique name used to identify this
			 set of Access List Rules.";
		}

		leaf remark {
		    type string;
		    description
			"A user description of the Access List.";
		}

		container rules {
		    description
			"Access List Rule Table ordered by sequence number.";

		    list rule {
			key "sequence";
			description
			    "A set of Access List Rules.";

			leaf sequence {
			    type uint32;
			    description
				"Rules are executed in increasing sequence
				 number.";
			}

			leaf action {
			    type frr:access-list-action;
			    description
				"One of the actions 'deny', 'permit'.";
			}

			leaf ip-prefix {
			    type inet:ip-prefix;
			    description
				"The IPv4 or IPv6 address and prefix.";
			}
		    }
		}
	    }
	}

	container prefix-lists {
	    description
		"Table of Prefix lists, indexed by name.  Each entry
		 contains a set of rules ordered by sequence number.";

	    list list {
		key "name";
		description
		    "Prefix List name.";

		leaf name {
		    type string;
		    mandatory true;
		    description
			"The Prefix List name as supplied by the developer.
			 It is a unique name used to identify this
			 set of Prefix List Rules.";
		}

		leaf description {
		    type string;
		    description
			"A user description of the prefix list.";
		}

		container rules {
		    description
			"Prefix List Rule Table ordered by sequence number.";

		    list rule {
			key "sequence";
			description
			    "A set of Prefix List Rules.";

			leaf sequence {
			    type uint32;
			    description
				"Rules are executed in increasing sequence
				 number.";
			}

			leaf action {
			    type frr:prefix-list-action;
			    description
				"One of the actions 'deny', 'permit'.";
			}

			leaf prefix {
			    type inet:ip-prefix;
			    description
				"The IPv4 or IPv6 address and prefix.";
			}

			leaf le-len {
			    type uint8;
			    description
				"An upper bound on the prefix length.";
			}

			leaf ge-len {
			    type uint8;
			    description
				"A lower bound on the prefix length.";
			}
		    }
		}
	    }
	}

	container route-maps {
	    description
		"Table of Route Maps, indexed by name.	Each entry
		 contains a set of rules ordered by sequence number.";

	    list map {
		key "name";
		description
		    "Route Map entries indexed by name.";

		leaf name {
		    type string;
		    mandatory true;
		    description
			"The Route Map name as supplied by the
			 developer.  It is a unique name used to
			 identify a set of rules that belong together.
			 Each rule has a sequence number.";
		}

		leaf description {
		    type string;
		    description
			"A user description of the Route Map.";
		}

		container rules {
		    description
			"Route Map Rule table.";

		    list rule {
			key "sequence";
			description
			    "The Route Map rule ordering sequence number.";

			leaf sequence {
			    type uint32;
			    description
				"Rules are applied in increasing
				 sequence order.";
			}

			leaf policy {
			    type frr:route-map-policy;
			    description
				"One of the actions 'deny', 'permit'.";
			}

			leaf description {
			    type string;
			    description
				"A user description of the Route Map.";
			}

			container match {
			    description
				"A Rule may match based on various
				 different criteria.  More than one of
				 these may apply.";

			    leaf as-path-name {
				type string;
				description
				    "The name of an as-path entry.";
			    }

			    container community {
				description
				    "Match community list.";

				leaf comm-list-name {
				    type string;
				    description
					"The name of a community list.";
				}

				leaf exact-match {
				    type boolean;
				    description
					"If matching a community list,
					 it may be specified as an
					 exact match.";
				}
			    }

			    container extcommunity {
				description
				    "Match extended community list.";

				leaf extcomm-list-name {
				    type string;
				    description
					"The name of an extended
					 community list.";
				}
			    }

			    leaf if-name {
				type leafref {
				    path "/ngif:interfaces-config"
					+ "/ngif:interface"
					+ "/ngif:name";
				}
				description
				    "Match based on the name of an
				     interface.";
			    }

			    leaf ip-address-access-list {
				type string;
				description
				    "Match based on the name of an
				     Access List.";
			    }

			    leaf ip-address-prefix-list {
				type leafref {
				    path "/ngrt:route-config"
					+ "/ngrt:dynamic"
					+ "/prefix-lists/list"
					+ "/name";
				}
				description
				    "Match based on the name of a
				    Prefix List.";
			    }

			    leaf ip-next-hop-access-list {
				type string;
				description
				    "Match based on the name of an
				     Access List.";
			    }

			    leaf ip-next-hop-ipv4-address {
				type inet:ipv4-address-no-zone;
				description
				    "Match an IPv4 address.";
			    }

			    leaf ip-next-hop-prefix-list {
				type leafref {
				    path "/ngrt:route-config/ngrt:dynamic"
					+ "/prefix-lists/list"
					+ "/name";
				}
				description
				    "Match the prefixes specified by
				     the name of a Prefix List.";
			    }

			    leaf ipv6-address-access-list {
				type string;
				description
				    "Match according to the name of an
				     Access List.";
			    }

			    leaf ipv6-address-prefix-list {
				type string;
				description
				    "Match according to the name of a
				     Prefix List.";
			    }

			    container large-community {
				description
				    "Match large community list.";

				leaf large-comm-list-name {
				    type string;
				    description
					"The name of a large
					 community list.";
				}
			    }

			    leaf local-preference {
				type uint32;
				description
				    "The local preference value is matched.";
			    }

			    container metric {
				description
				    "Settings for metric matching.";

				leaf value {
				    type uint32;
				    description
					"The metric value to be matched.";
				}
			    }

			    leaf origin {
				type frr:route-map-origin;
				description
				    "One of 'egp', 'igp',  or 'incomplete'.";
			    }

			    leaf peer-ip-address {
				type leafref {
				    path "/ngrt:route-config/ngrt:dynamic"
					+ "/ngbgp:bgp/ngbgp:routers"
					+ "/ngbgp:router/ngbgp:neighbors"
					+ "/ngbgp:neighbor/ngbgp:peer";
				}
				description
				    "The peer IP address is matched.";
			    }

			    leaf probability {
				type uint32;
				description
				    "Match a percentage of routes.";
			    }

			    leaf source-protocol {
				type frr:route-map-source-protocol;
				description
				    "Match the route source protocol.
				     One of 'bgp', 'connected', 'kernel',
				     'ospf', 'ospf6', 'system'.";
			    }

			    leaf tag {
				type uint32;
				description
				    "Match the router tag value.";
			    }
			}

			container set {
			    description
				"Once a match is made, some 'set'
				 actions are specified.	 More than one
				 of these may apply.";

			    container aggregator {
				description
				    "Attributes about an aggregator.";

				leaf asn {
				    type uint32;
				    description
					"Aggregator ASN.";
				}

				leaf ip-address {
				    type inet:ipv4-address-no-zone;
				    description
					"Aggregator IPv4 address.";
				}
			    }

			    container as-path {
				description
				    "Group as-path related attributes.";

				leaf exclude {
				    type string;
				    description
					"Exclude this set of AS numbers.";
				}

				leaf prepend {
				    type string;
				    description
					"Prepend this set of AS numbers.";
				}

				leaf last-as {
				    type uint32;
				    description
					"Prepend the leftmost ASN to the
					 AS_PATH.";
				}
			    }

			    leaf atomic-aggregate {
				type boolean;
				description
				    "BGP atomic-aggregate attribute.";
			    }

			    container community {
				description
				    "Configuration to set community.";

				leaf none {
				    type boolean;
				    description
					"Remove the community values from
					 the update.";
				}

				leaf value {
				    type string;
				    description
					"The existing BGP community values are
					 replaced with this community value.";
				}

				leaf additive {
				    type boolean;
				    description
					"Rather than replacing the existing
					 community values, this community
					 value is appended to the existing
					 set.";
				}
			    }

			    container community-list {
				description
				    "Configuration for community-lists.";

				leaf delete {
				    type leafref {
					path "/ngrt:route-config/ngrt:dynamic"
					    + "/ngbgp:bgp/ngbgp:community-lists"
					    + "/ngbgp:community/ngbgp:name";
				    }
				    description
					"The community values from the given
					 Community List are removed from the
					 BGP update.";
				}
			    }

			    container extcommunity-list {
				description
				    "Configuration for extcommunity-lists.";

				leaf rt {
				    type leafref {
					path "/ngrt:route-config/ngrt:dynamic"
					    + "/ngbgp:bgp/ngbgp:community-lists"
					    + "/ngbgp:community/ngbgp:name";
				    }
				    description
					"The Router Target is set to this
					 extended community value.";
				}

				leaf soo {
				    type leafref {
					path "/ngrt:route-config/ngrt:dynamic"
					    + "/ngbgp:bgp/ngbgp:community-lists"
					    + "/ngbgp:community/ngbgp:name";
				    }
				    description
					"The Site of Origin is set to this
					 extended community value.";
				}
			    }

			    leaf forwarding-address {
				type inet:ipv6-address;
				description
				    "IPv6 forwarding address.";
			    }

			    container ip {
				description
				    "IP attributes to be set.";

				container next-hop {
				    description
					"IP next-hop attributes to be set.";

				    leaf ipv4-address {
					type inet:ipv4-address-no-zone;
					description
					    "The next-hop is set to this
					     IPv4 address.";
				    }

				    leaf use-peer-address {
					type boolean;
					description
					    "If true, the BGP peer address
					     is use as the next hop.";
				    }

				    leaf unchanged {
					type boolean;
					description
					    "If true, the existing next hop
					     address is not modified.";
				    }
				}
			    }

			    container ipv4 {
				description
				    "IPv4 attributes to be set.";

				container vpn {
				    description
					"IPv4 VPN settings.";

				    container next-hop {
					description
					    "IPv4 VPN next-hop attributes
					     to be set.";

					leaf ipv4-address {
					    type inet:ipv4-address-no-zone;
					    description
						"The next-hop is set to
						 this IPv4 address.";
					}

					leaf ipv6-address {
					    type inet:ipv6-address;
					    description
						"The next-hop is set to
						 this IPv6 address.";
					}
				    }
				}
			    }

			    container ipv6 {
				description
				    "IPv6 attributes to be set.";

				container next-hop {
				    description
					"IPv6 next-hop attributes to
					 be set.";

				    leaf global-ipv6-address {
					type inet:ipv6-address;
					description
					    "The next-hop global
					     address is set to this
					     IPv6 address.";
				    }

				    leaf local-ipv6-address {
					type inet:ipv6-address;
					description
					    "The next-hop local
					     address is set to this
					     IPv6 address.";
				    }

				    leaf use-peer-address {
					type boolean;
					description
					    "If true, the BGP peer address
					     is use as the next hop.";
				    }

				    leaf prefer-global {
					type boolean;
					description
					    "If true, prefer the global
					     over the link-local if both
					     exist.";
				    }
				}

				container vpn {
				    description
					"IPv6 VPN settings.";

				    container next-hop {
					description
					    "IPv6 VPN next-hop attributes
					     to be set.";

					leaf ipv4-address {
					    type inet:ipv4-address-no-zone;
					    description
						"The next-hop is set to
						 this IPv4 address.";
					}

					leaf ipv6-address {
					    type inet:ipv6-address;
					    description
						"The next-hop is set to
						 this IPv6 address.";
					}
				    }
				}
			    }

			    container large-community {
				description
				    "Information about large communities.";

				leaf none {
				    type boolean;
				    description
					"Large community list.";
				}

				leaf value {
				    type string;
				    description
					"List of large communities.";
				}

				leaf additive {
				    type boolean;
				    description
					"Rather than replacing the existing
					 community values, this community
					 value is appended to the existing
					 set.";
				}
			    }

			    container large-comm-list {
				description
				    "Configuration for large-comm-lists.";

				leaf delete {
				    type leafref {
					path "/ngrt:route-config/ngrt:dynamic"
					    + "/ngbgp:bgp/ngbgp:community-lists"
					    + "/ngbgp:community/ngbgp:name";
				    }
				    description
					"The community values from the given
					 Large Communities List are
					 removed from the BGP update.";
				}
			    }

			    leaf local-preference {
				type uint32;
				description
				    "Set the local preference attribute to
				     this value.";
			    }

			    container metric {
				description
				    "Attributes for setting the metric.";

				leaf value {
				    type string {
					pattern "\+?([0-9]|[1-9][0-9]+)";
				    }
				    description
					"Set the metric attribute to
					 this value.";
				}
			    }

			    leaf origin {
				type frr:route-map-origin;
				description
				    "One of 'egp', 'igp',  or 'incomplete'.";
			    }

			    container originator {
				description
				    "Originator ID information.";

				leaf ip-address {
				    type inet:ipv4-address-no-zone;
				    description
					"The IPv4 address of the originator.";
				}
			    }

			    leaf src-ip-address {
				type inet:ip-address-no-zone;
				description
				    "Set the src IP address to this
				     IPv4 or IPv6 address.";
			    }

			    leaf tag {
				type uint32;
				description
				    "Set the tag attribute to this value.";
			    }

			    leaf weight {
				type uint32;
				description
				    "Set the weight attribute to this value.";
			    }
			}

			container call {
			    description
				"Apply another Route Map entry much like a
				 traditional function call, expecting a
				 permit/deny response.";

			    leaf rt-map-name {
				type leafref {
				    path "/ngrt:route-config/ngrt:dynamic"
					+ "/route-maps/map/name";
				}
				description
				    "Call the named Route Map entry.";
			    }
			}

			container exit {
			    description
				"As a final step in a Route Map, exit
				 conditions may be specified.";

			    leaf on-match-next {
				type boolean;
				description
				    "Exit by coninuting to the next
				     Route Map.";
			    }

			    leaf on-match-goto {
				type uint32;
				description
				    "Jump to the next sequence number equal-to
				     or greater than this specified sequence
				     number within this same Route Map.";
			    }
			}
		    }
		}
	    }
	}

	container manager {

	    container global-options {
		description
		    "These are options that apply to the Zebra daemon.";

		container debug {
		    description
			"Zebra debug options.";

		    leaf events {
			type boolean;
			description
			    "If true, debug Zebra events.";
		    }

		    leaf fpm {
			type boolean;
			description
			    "If true, debug Zebra Forwarding Plane Manager
			     events.";
		    }

		    leaf nht {
			type boolean;
			description
			    "If true, enable Zebra next hop tracking.";
		    }

		    container kernel {
			presence
			    "If present, enable debugging between zebra
			     and the kernel.";

			container msgdump {
			    presence
				"If present dump raw netlink messages to
				 the kernel.  Without a modifier send or
				 receive flag, both sent and received
				 messages are printed.";

			    uses zebra-packet-send-recv;
			}
		    }

		    container packet {
			presence
			    "If present, enable Zebra packet debugging.";

			uses zebra-packet-send-recv-detail;
		    }

		    container rib {
			presence
			    "If present, enable Zebra RIB event debugging.";

			leaf detail {
			    type boolean;
			    description
				"If true, debug packets in detail.";
			}
		    }
		}

		container log {
		    description
			"Zebra logging options.";

		    container file {
			description
			    "Information used to log to a disk file.";

			leaf filename {
			    type string;
			    description
				"The name of a log file.";
			}

			leaf level {
			    type frr:zebra-level;
			    description
				"One of the log-level names: alerts, critical,
				 debugging, emergencies, errors, informational,
				 notifications, or warnings.";
			}
		    }

		    container syslog {
			presence
			    "If present, log using syslog.";

			description
			    "Information used to log to syslog.";

			leaf level {
			    type frr:zebra-level;
			    description
				"One of the log-level names: alerts, critical,
				 debugging, emergencies, errors, informational,
				 notifications, or warnings.";
			}
		    }
		}

		leaf ptm {
		    type boolean;
		    default false;
		    description
			"If true, enable the Prescriptive Topology Manager.";
		}
	    }
	}
    }

    augment "/ngrt:route-state/ngrt:dynamic" {

	container access-lists {
	    description
		"Table of Access Lists, indexed by name.  Each entry
		 contains a set of rules ordered by sequence number.";

	    list list {
		key "name";
		description
		    "Access List name.";

		leaf name {
		    type string;
		    mandatory true;
		    description
			"The Access List name as supplied by the developer.
			 It is a unique name used to identify this
			 set of Access List Rules.";
		}

		leaf remark {
		    type string;
		    description
			"A user description of the Access List.";
		}

		container rules {
		    description
			"Access List Rule Table ordered by sequence number.";

		    list rule {
			key "sequence";
			description
			    "A set of Access List Rules.";

			leaf sequence {
			    type uint32;
			    description
				"Rules are executed in increasing sequence
				 number.";
			}

			leaf action {
			    type frr:access-list-action;
			    description
				"One of the actions 'deny', 'permit'.";
			}

			leaf ip-prefix {
			    type inet:ip-prefix;
			    description
				"The IPv4 or IPv6 address and prefix.";
			}
		    }
		}
	    }
	}

	container prefix-lists {
	    description
		"Table of Prefix lists, indexed by name.  Each entry
		 contains a set of rules ordered by sequence number.";

	    list list {
		key "name";
		description
		    "Prefix List name.";

		leaf name {
		    type string;
		    mandatory true;
		    description
			"The Prefix List name as supplied by the developer.
			 It is a unique name used to identify this
			 set of Prefix List Rules.";
		}

		leaf description {
		    type string;
		    description
			"A user description of the prefix list.";
		}

		container rules {
		    description
			"Prefix List Rule Table ordered by sequence number.";

		    list rule {
			key "sequence";
			description
			    "A set of Prefix List Rules.";

			leaf sequence {
			    type uint32;
			    description
				"Rules are executed in increasing sequence
				 number.";
			}

			leaf action {
			    type frr:prefix-list-action;
			    description
				"One of the actions 'deny', 'permit'.";
			}

			leaf prefix {
			    type inet:ip-prefix;
			    description
				"The IPv4 or IPv6 address and prefix.";
			}

			leaf le-len {
			    type uint8;
			    description
				"An upper bound on the prefix length.";
			}

			leaf ge-len {
			    type uint8;
			    description
				"A lower bound on the prefix length.";
			}
		    }
		}
	    }
	}

	container route-maps {
	    description
		"Table of Route Maps, indexed by name.	Each entry
		 contains a set of rules ordered by sequence number.";

	    list map {
		key "name";
		description
		    "Route Map entries indexed by name.";

		leaf name {
		    type string;
		    mandatory true;
		    description
			"The Route Map name as supplied by the
			 developer.  It is a unique name used to
			 identify a set of rules that belong together.
			 Each rule has a sequence number.";
		}

		leaf description {
		    type string;
		    description
			"A user description of the Route Map.";
		}

		container rules {
		    description
			"Route Map Rule table.";

		    list rule {
			key "sequence";
			description
			    "The Route Map rule ordering sequence number.";

			leaf sequence {
			    type uint32;
			    description
				"Rules are applied in increasing
				 sequence order.";
			}

			leaf policy {
			    type frr:route-map-policy;
			    description
				"One of the actions 'deny', 'permit'.";
			}

			leaf description {
			    type string;
			    description
				"A user description of the Route Map.";
			}

			container match {
			    description
				"A Rule may match based on various
				 different criteria.  More than one of
				 these may apply.";

			    leaf as-path-name {
				type string;
				description
				    "The name of an as-path entry.";
			    }

			    container community {
				description
				    "Match community list.";

				leaf comm-list-name {
				    type string;
				    description
					"The name of a community list.";
				}

				leaf exact-match {
				    type boolean;
				    description
					"If matching a community list,
					 it may be specified as an
					 exact match.";
				}
			    }

			    container extcommunity {
				description
				    "Match extended community list.";

				leaf extcomm-list-name {
				    type string;
				    description
					"The name of an extended
					 community list.";
				}
			    }

			    leaf if-name {
				type leafref {
				    path "/ngif:interfaces-config"
					+ "/ngif:interface"
					+ "/ngif:name";
				}
				description
				    "Match based on the name of an
				     interface.";
			    }

			    leaf ip-address-access-list {
				type string;
				description
				    "Match based on the name of an
				     Access List.";
			    }

			    leaf ip-address-prefix-list {
				type leafref {
				    path "/ngrt:route-config"
					+ "/ngrt:dynamic"
					+ "/prefix-lists/list"
					+ "/name";
				}
				description
				    "Match based on the name of a
				    Prefix List.";
			    }

			    leaf ip-next-hop-access-list {
				type string;
				description
				    "Match based on the name of an
				     Access List.";
			    }

			    leaf ip-next-hop-ipv4-address {
				type inet:ipv4-address-no-zone;
				description
				    "Match an IPv4 address.";
			    }

			    leaf ip-next-hop-prefix-list {
				type leafref {
				    path "/ngrt:route-config/ngrt:dynamic"
					+ "/prefix-lists/list"
					+ "/name";
				}
				description
				    "Match the prefixes specified by
				     the name of a Prefix List.";
			    }

			    leaf ipv6-address-access-list {
				type string;
				description
				    "Match according to the name of an
				     Access List.";
			    }

			    leaf ipv6-address-prefix-list {
				type string;
				description
				    "Match according to the name of a
				     Prefix List.";
			    }

			    container large-community {
				description
				    "Match large community list.";

				leaf large-comm-list-name {
				    type string;
				    description
					"The name of a large
					 community list.";
				}
			    }

			    leaf local-preference {
				type uint32;
				description
				    "The local preference value is matched.";
			    }

			    container metric {
				description
				    "Settings for metric matching.";

				leaf value {
				    type uint32;
				    description
					"The metric value to be matched.";
				}
			    }

			    leaf origin {
				type frr:route-map-origin;
				description
				    "One of 'egp', 'igp',  or 'incomplete'.";
			    }

			    leaf peer-ip-address {
				type leafref {
				    path "/ngrt:route-config/ngrt:dynamic"
					+ "/ngbgp:bgp/ngbgp:routers"
					+ "/ngbgp:router/ngbgp:neighbors"
					+ "/ngbgp:neighbor/ngbgp:peer";
				}
				description
				    "The peer IP address is matched.";
			    }

			    leaf probability {
				type uint32;
				description
				    "Match a percentage of routes.";
			    }

			    leaf source-protocol {
				type frr:route-map-source-protocol;
				description
				    "Match the route source protocol.
				     One of 'babel', 'bgp', 'connected',
				     'eigrp', 'isis', 'kernel', 'nhrp',
				     'ospf', 'ospf6', 'pim', 'rip',
				     'ripng', 'static', 'system'.";
			    }

			    leaf tag {
				type uint32;
				description
				    "Match the router tag value.";
			    }
			}

			container set {
			    description
				"Once a match is made, some 'set'
				 actions are specified.	 More than one
				 of these may apply.";

			    container aggregator {
				description
				    "Attributes about an aggregator.";

				leaf asn {
				    type uint32;
				    description
					"Aggregator ASN.";
				}

				leaf ip-address {
				    type inet:ipv4-address-no-zone;
				    description
					"Aggregator IPv4 address.";
				}
			    }

			    container as-path {
				description
				    "Group as-path related attributes.";

				leaf exclude {
				    type string;
				    description
					"Exclude this set of AS numbers.";
				}

				leaf prepend {
				    type string;
				    description
					"Prepend this set of AS numbers.";
				}

				leaf last-as {
				    type uint32;
				    description
					"Prepend the leftmost ASN to the
					 AS_PATH.";
				}
			    }

			    leaf atomic-aggregate {
				type boolean;
				description
				    "BGP atomic-aggregate attribute.";
			    }

			    container community {
				description
				    "Configuration to set community.";

				leaf none {
				    type boolean;
				    description
					"Remove the community values from
					 the update.";
				}

				leaf value {
				    type string;
				    description
					"The existing BGP community values are
					 replaced with this community value.";
				}

				leaf additive {
				    type boolean;
				    description
					"Rather than replacing the existing
					 community values, this community
					 value is appended to the existing
					 set.";
				}
			    }

			    container community-list {
				description
				    "Configuration for community-lists.";

				leaf delete {
				    type leafref {
					path "/ngrt:route-config/ngrt:dynamic"
					    + "/ngbgp:bgp/ngbgp:community-lists"
					    + "/ngbgp:community/ngbgp:name";
				    }
				    description
					"The community values from the given
					 Community List are removed from the
					 BGP update.";
				}
			    }

			    container extcommunity-list {
				description
				    "Configuration for extcommunity-lists.";

				leaf rt {
				    type leafref {
					path "/ngrt:route-config/ngrt:dynamic"
					    + "/ngbgp:bgp/ngbgp:community-lists"
					    + "/ngbgp:community/ngbgp:name";
				    }
				    description
					"The Router Target is set to this
					 extended community value.";
				}

				leaf soo {
				    type leafref {
					path "/ngrt:route-config/ngrt:dynamic"
					    + "/ngbgp:bgp/ngbgp:community-lists"
					    + "/ngbgp:community/ngbgp:name";
				    }
				    description
					"The Site of Origin is set to this
					 extended community value.";
				}
			    }

			    leaf forwarding-address {
				type inet:ipv6-address;
				description
				    "IPv6 forwarding address.";
			    }

			    container ip {
				description
				    "IP attributes to be set.";

				container next-hop {
				    description
					"IP next-hop attributes to be set.";

				    leaf ipv4-address {
					type inet:ipv4-address-no-zone;
					description
					    "The next-hop is set to this
					     IPv4 address.";
				    }

				    leaf use-peer-address {
					type boolean;
					description
					    "If true, the BGP peer address
					     is use as the next hop.";
				    }

				    leaf unchanged {
					type boolean;
					description
					    "If true, the existing next hop
					     address is not modified.";
				    }
				}
			    }

			    container ipv4 {
				description
				    "IPv4 attributes to be set.";

				container vpn {
				    description
					"IPv4 VPN settings.";

				    container next-hop {
					description
					    "IPv4 VPN next-hop attributes
					     to be set.";

					leaf ipv4-address {
					    type inet:ipv4-address-no-zone;
					    description
						"The next-hop is set to
						 this IPv4 address.";
					}

					leaf ipv6-address {
					    type inet:ipv6-address;
					    description
						"The next-hop is set to
						 this IPv6 address.";
					}
				    }
				}
			    }

			    container ipv6 {
				description
				    "IPv6 attributes to be set.";

				container next-hop {
				    description
					"IPv6 next-hop attributes to
					 be set.";

				    leaf global-ipv6-address {
					type inet:ipv6-address;
					description
					    "The next-hop global
					     address is set to this
					     IPv6 address.";
				    }

				    leaf local-ipv6-address {
					type inet:ipv6-address;
					description
					    "The next-hop local
					     address is set to this
					     IPv6 address.";
				    }

				    leaf use-peer-address {
					type boolean;
					description
					    "If true, the BGP peer address
					     is use as the next hop.";
				    }

				    leaf prefer-global {
					type boolean;
					description
					    "If true, prefer the global
					     over the link-local if both
					     exist.";
				    }
				}

				container vpn {
				    description
					"IPv6 VPN settings.";

				    container next-hop {
					description
					    "IPv6 VPN next-hop attributes
					     to be set.";

					leaf ipv4-address {
					    type inet:ipv4-address-no-zone;
					    description
						"The next-hop is set to
						 this IPv4 address.";
					}

					leaf ipv6-address {
					    type inet:ipv6-address;
					    description
						"The next-hop is set to
						 this IPv6 address.";
					}
				    }
				}
			    }

			    container large-community {
				description
				    "Information about large communities.";

				leaf none {
				    type boolean;
				    description
					"Large community list.";
				}

				leaf value {
				    type string;
				    description
					"List of large communities.";
				}

				leaf additive {
				    type boolean;
				    description
					"Rather than replacing the existing
					 community values, this community
					 value is appended to the existing
					 set.";
				}
			    }

			    container large-comm-list {
				description
				    "Configuration for large-comm-lists.";

				leaf delete {
				    type leafref {
					path "/ngrt:route-config/ngrt:dynamic"
					    + "/ngbgp:bgp/ngbgp:community-lists"
					    + "/ngbgp:community/ngbgp:name";
				    }
				    description
					"The community values from the given
					 Large Communities List are
					 removed from the BGP update.";
				}
			    }

			    leaf local-preference {
				type uint32;
				description
				    "Set the local preference attribute to
				     this value.";
			    }

			    container metric {
				description
				    "Attributes for setting the metric.";


				leaf value {
				    type uint32;
				    description
					"Set the metric attribute to
					 this value.";
				}
			    }

			    leaf origin {
				type frr:route-map-origin;
				description
				    "One of 'egp', 'igp',  or 'incomplete'.";
			    }

			    container originator {
				description
				    "Originator ID information.";

				leaf ip-address {
				    type inet:ipv4-address-no-zone;
				    description
					"The IPv4 address of the originator.";
				}
			    }

			    leaf src-ip-address {
				type inet:ip-address-no-zone;
				description
				    "Set the src IP address to this
				     IPv4 or IPv6 address.";
			    }

			    leaf tag {
				type uint32;
				description
				    "Set the tag attribute to this value.";
			    }

			    leaf weight {
				type uint32;
				description
				    "Set the weight attribute to this value.";
			    }
			}

			container call {
			    description
				"Apply another Route Map entry much like a
				 traditional function call, expecting a
				 permit/deny response.";

			    leaf rt-map-name {
				type leafref {
				    path "/ngrt:route-config/ngrt:dynamic"
					+ "/route-maps/map/name";
				}
				description
				    "Call the named Route Map entry.";
			    }
			}

			container exit {
			    description
				"As a final step in a Route Map, exit
				 conditions may be specified.";

			    leaf on-match-next {
				type boolean;
				description
				    "Exit by coninuting to the next
				     Route Map.";
			    }

			    leaf on-match-goto {
				type uint32;
				description
				    "Jump to the next sequence number equal-to
				     or greater than this specified sequence
				     number within this same Route Map.";
			    }
			}
		    }
		}
	    }
	}

	container manager {

	    container global-options {
		description
		    "These are options that apply to the Zebra daemon.";

		container debug {
		    description
			"Zebra debug options.";

		    leaf events {
			type boolean;
			description
			    "If true, debug Zebra events.";
		    }

		    leaf fpm {
			type boolean;
			description
			    "If true, debug Zebra Forwarding Plane Manager
			     events.";
		    }

		    leaf nht {
			type boolean;
			description
			    "If true, enable Zebra next hop tracking.";
		    }

		    container kernel {
			presence
			    "If present, enable debugging between zebra
			     and the kernel.";

			container msgdump {
			    presence
				"If present dump raw netlink messages to
				 the kernel.  Without a modifier send or
				 receive flag, both sent and received
				 messages are printed.";

			    uses zebra-packet-send-recv;
			}
		    }

		    container packet {
			presence
			    "If present, enable Zebra packet debugging.";

			uses zebra-packet-send-recv-detail;
		    }

		    container rib {
			presence
			    "If present, enable Zebra RIB event debugging.";

			leaf detail {
			    type boolean;
			    description
				"If true, debug packets in detail.";
			}
		    }
		}

		container log {
		    description
			"Zebra logging options.";

		    container file {
			description
			    "Information used to log to a disk file.";

			leaf filename {
			    type string;
			    description
				"The name of a log file.";
			}

			leaf level {
			    type frr:zebra-level;
			    description
				"One of the log-level names: alerts, critical,
				debugging, emergencies, errors, informational,
				notifications, or warnings.";
			}
		    }

		    container syslog {
			presence
			    "If present, log using syslog.";

			description
			    "Information used to log to syslog.";

			leaf level {
			    type frr:zebra-level;
			    description
				"One of the log-level names: alerts, critical,
				 debugging, emergencies, errors, informational,
				 notifications, or warnings.";
			}
		    }
		}

		leaf ptm {
		    type boolean;
		    default false;
		    description
			"If true, enable the Prescriptive Topology Manager.";
		}
	    }
	}
    }
}
