module netgate-host {

    yang-version 1.1;

    namespace "urn:netgate:xml:yang:netgate-host";
    prefix "nghost";

    import ietf-inet-types {
	prefix "inet";
    }

    import ietf-yang-types {
	prefix "yang";
    }

    import netgate-common {
	prefix "ngcom";
    }

    organization "Netgate";

    contact "Web: <http://www.netgate.com>";

    description
	"This YANG module provides a data model for host data.

	 Copyright 2019-2020 Rubicon Communications, LLC.
	";

    revision 2020-06-15 {
	description
	    "TNSR Release 20.06.";
    }

    revision 2020-02-15 {
	description
	    "TNSR Release 20.02.";
    }

    revision 2019-08-30 {
	description
	    "TNSR Release 19.08.";
    }

    revision 2019-05-30 {
	description
	    "TNSR Release 19.05.";
    }

    revision 2019-02-15 {
	description
	    "TNSR Release 19.02.";
    }

    revision 2019-02-07 {
	description
	    "Initial revision.";
    }

    typedef host-acl-protocol-name {
	type enumeration {
	    enum icmp {
		description
		    "Internet Control Message Protocol (ICMP).";
	    }

	    enum tcp {
		description
		    "Transmission Control Protocol (TCP).";
	    }

	    enum udp {
		description
		    "User Datagram Protocol (UDP).";
	    }
	}
    }

    typedef host-acl-protocol-number {
	type uint8;
	description
	    "Host acl protocol number.";
    }

    typedef host-acl-protocol {
	type union {
	    type host-acl-protocol-name;
	    type host-acl-protocol-number;
	}
    }


    typedef host-acl-icmp-type {
	type enumeration {
	    enum echo-reply {
		description
		    "Echo reply.";
	    }

	    enum destination-unreachable {
		description
		    "Destination unreachable.";
	    }

	    enum source-quench {
		description
		    "Source quench.";
	    }

	    enum redirect {
		description
		    "Redirect.";
	    }

	    enum echo-request {
		description
		    "Echo request.";
	    }

	    enum time-exceeded {
		description
		    "Time exceeded.";
	    }

	    enum parameter-problem {
		description
		    "Parameter problem.";
	    }

	    enum timestamp-request {
		description
		    "Timestamp request.";
	    }

	    enum timestamp-reply {
		description
		    "Timestamp reply.";
	    }

	    enum info-request {
		description
		    "Info request.";
	    }

	    enum info-reply {
		description
		    "Info reply.";
	    }

	    enum address-mask-request {
		description
		    "Address mask request.";
	    }

	    enum address-mask-reply {
		description
		    "Address mask reply.";
	    }

	    enum router-advertisement {
		description
		    "Router advertisement.";
	    }

	    enum router-solicitation {
		description
		    "Router solicitation.";
	    }
	}
    }

    typedef host-acl-icmpv6-type {
	type enumeration {
	    enum destination-unreachable {
		description
		    "Destination unreachable.";
	    }

	    enum packet-too-big {
		description
		    "Packet too big.";
	    }

	    enum time-exceeded {
		description
		    "Time exceeded.";
	    }

	    enum echo-request {
		description
		    "Echo request.";
	    }

	    enum echo-reply {
		description
		    "Echo reply.";
	    }

	    enum mld-listener-query {
		description
		    "MLD listener query.";
	    }

	    enum mld-listener-report {
		description
		    "MLD listener report.";
	    }

	    enum mld-listener-reduction {
		description
		    "MLD listener reduction.";
	    }

	    enum nd-router-solicit {
		description
		    "ND router solicit.";
	    }

	    enum nd-router-advert {
		description
		    "ND router advert.";
	    }

	    enum nd-neighbor-solicit {
		description
		    "ND neighbor solicit.";
	    }

	    enum nd-neighbor-advert {
		description
		    "ND neighbor advert.";
	    }

	    enum nd-redirect {
		description
		    "ND redirect.";
	    }

	    enum parameter-problem {
		description
		    "Parameter problem.";
	    }

	    enum router-renumbering {
		description
		    "Router renumbering.";
	    }
	}
    }

    typedef host-acl-action {
	type enumeration {
	    enum permit {
		description
		    "Permit.";
	    }

	    enum deny {
		description
		    "Deny.";
	    }
	}
    }

    container host-config {
	description
	    "Host configuration parameters.";

	container security {
	    description
		"Host security configuration parameters.";

	    container host-acls {
		description
		    "Host access lists (ACLs).";

		list host-acl {
		    key "acl-name";

		    description
			"The list of configured host ACLs.";

		    leaf acl-name {
			    type ngcom:identifier-63;
			    description
				"The name of the host ACL.";
		    }

		    leaf acl-seq {
			    type uint32;
			    description
				"The sequence number of the host ACL.";
		    }

		    leaf description {
			    type ngcom:description-63;
			    description
				"The description of the host ACL.";
		    }

		    list acl-rule {
			key "rule-seq";

			description
			    "The list of the host ACL rules.";

			leaf rule-seq {
			    type uint32;
			    description
				"The sequence number of the rule.";
			}

			leaf description {
			    type ngcom:description-63;
			    description
				"The description of the rule.";
			}

			container packet-match {
			    description
				"The matching packets of the rule.";

			    leaf input-if {
				type ngcom:identifier-31;
				description
				    "The input interface name.";
			    }

			    container link {
				description
				    "Ethernet traffic match.";

				leaf source {
				    type yang:mac-address;
				    description
					"The source MAC address.";
				}

				leaf destination {
				    type yang:mac-address;
				    description
					"The destination MAC address.";
				}
			    }

			    container ip {
				description
				    "IP traffic match.";

				leaf version {
				    type uint8 {
					range "4 | 6";
				    }
				    description
					"IP version.";
				}

				leaf protocol {
				    type host-acl-protocol;
				    description
					"The IP protocol.";
				}

				leaf source {
				    type inet:ip-prefix;
				    description
					"The source IP prefix.";
				}

				leaf destination {
				    type inet:ip-prefix;
				    description
					"The destination IP prefix.";
				}

				container transport {
				    description
					"Transport options.";

				    container source-port {
					description
					    "The source port range.";

					leaf first {
					    type inet:port-number;
					    description
						"The first port number.";
					}

					leaf last {
					    type inet:port-number;
					    description
						"The last port number.";
					}
				    }

				    container destination-port {
					description
					    "The destination port range.";

					leaf first {
					    type inet:port-number;
					    description
						"The first port number.";
					}

					leaf last {
					    type inet:port-number;
					    description
						"The last port number.";
					}
				    }

				    container tcp {
					description
					    "TCP options.";

					container flags {
					    description
						"TCP flags.";

					    leaf cwr {
						type boolean;
						description
						    "Congestion
						     Window Reduced.";
					    }

					    leaf ece {
						type boolean;
						description
						    "ECN-Echo.";
					    }

					    leaf urg {
						type boolean;
						description
						    "Urgent.";
					    }

					    leaf ack {
						type boolean;
						description
						    "Acknowledgment.";
					    }

					    leaf psh {
						type boolean;
						description
						    "Push.";
					    }

					    leaf rst {
						type boolean;
						description
						    "Reset.";
					    }

					    leaf syn {
						type boolean;
						description
						    "Synchronize.";
					    }

					    leaf fin {
						type boolean;
						description
						    "Finished.";
					    }
					}
				    }

				    container icmp {
					description
					    "ICMP options.";

					choice type {
					    case ipv4 {
						leaf icmp-type {
						    type host-acl-icmp-type;
						    description
							"ICMP type.";
						}
					    }

					    case ipv6 {
						leaf icmpv6-type {
						    type host-acl-icmpv6-type;
						    description
							"ICMPv6 type.";
						}
					    }
					}

					leaf code {
					    type uint8;
					    description
						"ICMP code.";
					}
				    }
				}
			    }
			}

			leaf action {
			    type host-acl-action;
			    mandatory true;
			    description
				"The action of the rule.";
			}
		    }
		}
	    }
	}
    }

    container host-state {
	config false;
	description
	    "Host state parameters.";

	container security {
	    description
		"Host security state parameters.";

	    container host-acls {
		description
		    "Host access lists (ACLs).";

		list host-acl {
		    key "acl-name";

		    description
			"The list of configured host ACLs.";

		    leaf acl-name {
			    type ngcom:identifier-63;
			    description
				"The name of the host ACL.";
		    }

		    leaf acl-seq {
			    type uint32;
			    description
				"The sequence number of the host ACL.";
		    }

		    leaf description {
			    type ngcom:description-63;
			    description
				"The description of the host ACL.";
		    }

		    list acl-rule {
			key "rule-seq";

			description
			    "The list of the host ACL rules.";

			leaf rule-seq {
			    type uint32;
			    description
				"The sequence number of the rule.";
			}

			leaf description {
			    type ngcom:description-63;
			    description
				"The description of the rule.";
			}

			container packet-match {
			    description
				"The matching packets of the rule.";

			    leaf input-if {
				type ngcom:identifier-31;
				description
				    "The input interface name.";
			    }

			    container link {
				description
				    "Ethernet traffic match.";

				leaf source {
				    type yang:mac-address;
				    description
					"The source MAC address.";
				}

				leaf destination {
				    type yang:mac-address;
				    description
					"The destination MAC address.";
				}
			    }

			    container ip {
				description
				    "IP traffic match.";

				leaf version {
				    type uint8 {
					range "4 | 6";
				    }
				    description
					"IP version.";
				}

				leaf protocol {
				    type host-acl-protocol;
				    description
					"The IP protocol.";
				}

				leaf source {
				    type inet:ip-prefix;
				    description
					"The source IP prefix.";
				}

				leaf destination {
				    type inet:ip-prefix;
				    description
					"The destination IP prefix.";
				}

				container transport {
				    description
					"Transport options.";

				    container source-port {
					description
					    "The source port range.";

					leaf first {
					    type inet:port-number;
					    description
						"The first port number.";
					}

					leaf last {
					    type inet:port-number;
					    description
						"The last port number.";
					}
				    }

				    container destination-port {
					description
					    "The destination port range.";

					leaf first {
					    type inet:port-number;
					    description
						"The first port number.";
					}

					leaf last {
					    type inet:port-number;
					    description
						"The last port number.";
					}
				    }

				    container tcp {
					description
					    "TCP options.";

					container flags {
					    description
						"TCP flags.";

					    leaf cwr {
						type boolean;
						description
						    "Congestion
						     Window Reduced.";
					    }

					    leaf ece {
						type boolean;
						description
						    "ECN-Echo.";
					    }

					    leaf urg {
						type boolean;
						description
						    "Urgent.";
					    }

					    leaf ack {
						type boolean;
						description
						    "Acknowledgment.";
					    }

					    leaf psh {
						type boolean;
						description
						    "Push.";
					    }

					    leaf rst {
						type boolean;
						description
						    "Reset.";
					    }

					    leaf syn {
						type boolean;
						description
						    "Synchronize.";
					    }

					    leaf fin {
						type boolean;
						description
						    "Finished.";
					    }
					}
				    }

				    container icmp {
					description
					    "ICMP options.";

					choice type {
					    case ipv4 {
						leaf icmp-type {
						    type host-acl-icmp-type;
						    description
							"ICMP type.";
						}
					    }

					    case ipv6 {
						leaf icmpv6-type {
						    type host-acl-icmpv6-type;
						    description
							"ICMPv6 type.";
						}
					    }
					}

					leaf code {
					    type uint8;
					    description
						"ICMP code.";
					}
				    }
				}
			    }
			}

			leaf action {
			    type host-acl-action;
			    mandatory true;
			    description
				"The action of the rule.";
			}

			leaf total-bytes {
			    type uint64;
			    description
				"Count of bytes matched.";
			}

			leaf total-packets {
			    type uint32;
			    description
				"Count of packets matched.";
			}
		    }
		}
	    }
	}
    }
}
