module netgate-common {

    yang-version 1.1;

    namespace "urn:netgate:xml:yang:netgate-common";
    prefix "ngcom";

    organization "Netgate";

    contact "Web: <http://www.netgate.com>";

    description
        "Definitions of common elements (types, etc) used by multiple modules
         of the Netgate router.

    Copyright 2017-2020 Rubicon Communications, LLC. All rights reserved.";

    revision 2022-02-15 {
	description
	    "TNSR Release 22.02.";
    }

    revision 2021-06-15 {
	description
	    "TNSR Release 21.07.";
    }

    revision 2021-02-15 {
	description
	    "TNSR Release 21.02";
    }

    revision 2020-11-01 {
	description
	    "TNSR Release 20.10.1";
    }

    revision 2020-06-15 {
	description
	    "TNSR Release 20.06.";
    }

    revision 2020-02-15 {
	description
	    "TNSR Release 20.02.";
    }

    revision 2019-05-30 {
	description
	    "TNSR Release 19.05.";
    }

    revision 2019-02-15 {
	description
	    "TNSR Release 19.02.";
    }

    revision 2017-06-16 {
        description
            "Initial revision.";
    }

    typedef identifier {
	type string {
	    pattern '[a-zA-Z_][a-zA-Z0-9_-]*';
	}
    }

    typedef identifier-31 {
	type ngcom:identifier {
	    length "1..31";
	}
    }

    typedef identifier-32 {
	type ngcom:identifier {
	    length "1..32";
	}
    }

    typedef identifier-63 {
	type ngcom:identifier {
	    length "1..63";
	}
    }

    typedef identifier-64 {
	type ngcom:identifier {
	    length "1..64";
	}
    }


    typedef string-xml-no-escape {
	type string {
	    pattern "[^<>&\"']*";
	}
    }

    typedef description-63 {
	type ngcom:string-xml-no-escape {
	    length "1..63";
	}
    }


    typedef if-identifier {
	type string {
	    pattern '[a-zA-Z_][a-zA-Z0-9_/.-]*';
	}
    }

    typedef if-identifier-31 {
	type ngcom:if-identifier {
	    length "1..31";
	}
    }

    typedef if-identifier-63 {
	type ngcom:if-identifier {
	    length "1..63";
	}
    }


    typedef rt-identifier-15 {
	type string {
	    length "1..15";
	    pattern '[a-zA-Z_][a-zA-Z0-9_:-]*';
	}
    }

    typedef linux-if-name {
	type string {
	    length "1..15";	/* IFNAMSIZ and a NUL. */
	    pattern '[a-zA-Z_][a-zA-Z0-9_.-]*';
	}
    }

    typedef host-if-name {
	type linux-if-name;
    }

    typedef rt-identifier-63 {
	type string {
	    length "1..63";
	    pattern '[a-zA-Z_][a-zA-Z0-9_:-]*';
	}
    }

    typedef memory-size-string {
	type string {
	    pattern '[1-9][0-9]*([kKmMgG])?';
	}
	description
	    "Memory size type.";
    }

    typedef memory-page-size {
	type enumeration {
	    enum 4k;
	    enum 2m;
	    enum 1g;
	    enum default {
		description
		    "default page size.";
	    }
	}
	description
	    "Enumeration of available page sizes.";
    }

    typedef ip-address-family {
	type enumeration {
	    enum ipv4 {
		description
		    "IPv4";
	    }
	    enum ipv6 {
		description
		    "IPv4";
	    }
	}
	description
	    "Enumeration of basic IP address family types.";
    }

    typedef ng-tunnel-type {
        type enumeration {
            enum none {
                value 0;
                description
                    "No tunnel";
            }
            enum ipsec {
                value 1;
                description
                    "IPsec (ESP)";
            }
            enum gre {
                value 2;
                description
                    "Generic Routing Encapsulation";
            }
        }
        description
            "Supported types of tunnel/encapsulation.";
    }

    typedef service-operation {
        type enumeration {
            enum start {
                description
                    "Start if not already running";
            }
            enum stop {
                description
                    "Stop if running";
            }
            enum restart {
                description
                    "Stop if running, then start";
            }
            enum status {
                description
                    "Check status";
            }
        }
        description
            "Common operations that can be performed on a service";
    }

    typedef service-op-enable-disable {
	type enumeration {
            enum enable {
                description
                    "Enable option";
            }
            enum disable {
                description
                    "Disable option";
            }
	}
    }

    feature netgate-has-netns {
	description
	    "Enabling this feature asserts that the system supports
	     different network namespaces, notably 'host' and 'dataplane'
	     namespaces.  Withoug this feature, host and dataplane are
	     same and represented by 'host'.";
    }

    typedef network-namespace {
	type enumeration {
            enum host {
                description
                    "Host network namespace";
            }
            enum dataplane {
                description
                    "Dataplane network namespace";
            }
	}
	description
	    "Enumeration of available network namespaces.";
    }

    typedef database-name {
	type enumeration {
            enum running {
                description
                    "The active database configuration";
            }
            enum candidate {
                description
                    "The candidate database configuration";
            }
            enum startup {
                description
                    "The startup database configuration";
            }
	}
    }

    /*
     * OID expressed in IETF dot-form.
     *
     * Top level: 0 ~ 2
     * 2nd level for 0 or 1: 0 ~ 39
     * 2nd level for 2: any value 0 through 2^32 - 1
     * 3rd level and beyond: any value 0 through 2^32 - 1
     *
     * Allow "absolute" OIDs with a leading ".".
     * For views, an OID prefix at any level is allowed.
     */
    typedef object-id-128 {
	type string {
	    pattern '(((\.?)[0-1](\.[1-3]?[0-9]))'
		  + '|((\.?)2\.(0|([1-9]\d*))))'
		  + '(\.(0|([1-9]\d*)))*';
       }
    }

    typedef object-id-view-128 {
	type string {
	    pattern '((\.?)(0|1))'
		  + '|(((\.?)(0|1)(\.([1-3]?[0-9])))(\.(0|[1-9]\d*))*)'
		  + '|(((\.?)(2))(\.(0|[1-9]\d*))*)';
       }
    }

    /*
     * Base64 Encoded values
     */
     typedef base64-encoding {
	type string {
	    pattern '[A-Za-z0-9\+/]*=*';
	}
    }
}
