module netgate-common {

    namespace "urn:netgate:xml:yang:netgate-common";
    prefix "ngcom";

    organization "Netgate";

    contact "Web: <http://www.netgate.com>";

    description
        "Definitions of common elements (types, etc) used by multiple modules
         of the Netgate router.

    Copyright 2017 Rubicon Communications, LLC. All rights reserved.";

    revision 2019-02-15 {
	description
	    "TNSR Release 19.02.";
    }

    revision 2017-06-16 {
        description
            "Initial revision.";
    }

    typedef identifier {
	type string {
	    pattern '[a-zA-Z_][a-zA-Z0-9_-]*';
	}
    }

    typedef identifier-31 {
	type ngcom:identifier {
	    length "1..31";
	}
    }

    typedef identifier-32 {
	type ngcom:identifier {
	    length "1..32";
	}
    }

    typedef identifier-63 {
	type ngcom:identifier {
	    length "1..63";
	}
    }

    typedef identifier-64 {
	type ngcom:identifier {
	    length "1..64";
	}
    }


    typedef description {
	type string;
    }

    typedef description-63 {
	type ngcom:description {
	    length "1..63";
	}
    }


    typedef if-identifier {
	type string {
	    pattern '[a-zA-Z_][a-zA-Z0-9_/.-]*';
	}
    }

    typedef if-identifier-31 {
	type ngcom:if-identifier {
	    length "1..31";
	}
    }

    typedef if-identifier-63 {
	type ngcom:if-identifier {
	    length "1..63";
	}
    }


    typedef rt-identifier-63 {
	type string {
	    pattern '[a-zA-Z_][a-zA-Z0-9_:-]*';
	    length "1..63";
	}
    }


    typedef ip-address-family {
	description
	    "Enumeration of basic IP address family types.";

	type enumeration {
	    enum ipv4 {
		description
		    "IPv4";
	    }
	    enum ipv6 {
		description
		    "IPv4";
	    }
	}
    }

    typedef ng-tunnel-type {
        description
            "Supported types of tunnel/encapsulation.";

        type enumeration {
            enum none {
                value 0;
                description
                    "No tunnel";
            }
            enum ipsec {
                value 1;
                description
                    "IPsec (ESP)";
            }
            enum gre {
                value 2;
                description
                    "Generic Routing Encapsulation";
            }
        }
    }

    typedef service-operation {
        description
            "Common operations that can be performed on a service";

        type enumeration {
            enum start {
                description
                    "Start if not already running";
            }
            enum stop {
                description
                    "Stop if running";
            }
            enum restart {
                description
                    "Stop if running, then start";
            }
            enum status {
                description
                    "Check status";
            }
            enum enable {
                description
                    "Enable option";
            }
            enum disable {
                description
                    "Disable option";
            }
        }
    }
}

