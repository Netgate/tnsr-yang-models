module netgate-system {

    namespace "urn:netgate:xml:yang:netgate-system";
    prefix "ngsys";

    import ietf-inet-types {
	prefix "inet";
    }

    organization "Netgate";

    contact "Web: <http://www.netgate.com>";

    description
	"This YANG module provides a Netgate-defined data-model
	 for SYSTEM data.

	 Copyright 2018-2019 Rubicon Communications, LLC.
	 ";

    revision 2019-05-30 {
	description
	    "TNSR Release 19.05.";
    }

    revision 2017-11-01 {
	description
	    "Initial revision.";
    }

    rpc system-ping {
	input {
	    leaf destination {
		mandatory true;
		type union {
		    type inet:domain-name;
		    type inet:ip-address-no-zone;
		}
		description
		    "Destination being pinged.";
	    }
	    leaf interface {
		type string;
		description
		    "Interface source";
	    }
	    leaf source {
		type inet:ip-address-no-zone;
		description
		    "IP address source";
	    }
	    leaf count {
		type uint32;
		description
		    "Number of ECHO requests";
	    }
	    leaf ipv4-only {
		type boolean;
		description
		    "Only use IPv4 addressing.";
	    }
	    leaf ipv6-only {
		type boolean;
		description
		    "Only use IPv6 addressing.";
	    }
	    leaf packet-size {
		type uint32;
		description
		    "Ping packet (data) size";
	    }
	    leaf ttl {
		type uint8;
		description
		    "Time to live";
	    }
	    leaf timeout {
		type uint32;
		description
		    "Absolute wait time.";
	    }
	}
	output {
	    leaf stdout {
		type string;
	    }
	}
    }

    rpc system-traceroute {
	input {
	    leaf destination {
		mandatory true;
		type union {
		    type inet:domain-name;
		    type inet:ip-address-no-zone;
		}
		description
		    "Destination being pinged.";
	    }
	    leaf interface {
		type string;
		description
		    "Interface source";
	    }
	    leaf source {
		type inet:ip-address-no-zone;
		description
		    "IP address source";
	    }
	    leaf ipv4-only {
		type boolean;
		description
		    "Only use IPv4 addressing.";
	    }
	    leaf ipv6-only {
		type boolean;
		description
		    "Only use IPv6 addressing.";
	    }
	    leaf packet-size {
		type uint32;
		description
		    "Ping packet (data) size";
	    }
	    leaf ttl {
		type uint8;
		description
		    "Time to live";
	    }
	    leaf no-dns {
		type boolean;
		description
		    "Do not perform name lookup.";
	    }
	    leaf wait-time {
		type uint32;
		description
		    "Probe response wait time.";
	    }
	    leaf timeout {
		type uint32;
		description
		    "Timeout for response";
	    }
	}
	output {
	    leaf stdout {
		type string;
	    }
	}
    }


    rpc system-nft {
	input {
	    leaf command {
		type string;
		description
		    "Netfilter utility command";
	    }
	    leaf timeout {
		type uint32;
		description
		    "Timeout for response";
	    }
	}
	output {
	    leaf stdout {
		type string;
	    }
	}
    }

    container system {
	description
	    "System group configuration.";

	leaf description {
	    type string;
	    description
		"A textual description of the entity. This value should
		 include the full name and version identification of the
		 system's hardware type, software operating-system, and
		 networking software. It is mandatory that this only contain
		 printable ASCII characters.";

	}

	leaf contact {
	    type string;
	    description
		"The administrator contact information for the system.
		 A server implementation MAY map this leaf to the sysContact
		 MIB object. Such an implementation needs to use some
		 mechanism to handle the differences in size and characters
		 allowed between this leaf and sysContact.  The definition of
		such a mechanism is outside the scope of this document.";
	   reference
	       "RFC 3418: Management Information Base (MIB) for the
		Simple Network Management Protocol (SNMP)
		SNMPv2-MIB.sysContact";
	}

	leaf name {
	    type inet:domain-name;
	    description
		"The name of the host. This name can be a single domain
		 label or the fully qualified domain name of the host.";
	}

	leaf location {
	    type string;
	    description
		"The system location.

		 A server implementation MAY map this leaf to the sysLocation
		 MIB object.  Such an implementation needs to use some
		 mechanism to handle the differences in size and characters
		 allowed between this leaf and sysLocation.  The definition
		 of such a mechanism is outside the scope of this document.";

	    reference
		"RFC 3418: Management Information Base (MIB) for the
		 Simple Network Management Protocol (SNMP)
		 SNMPv2-MIB.sysLocation";
	}

	container auth {
	    list user {
		key "user-name";
		description
		    "allowed users of the system";

		leaf user-name {
		    type string {
			length 2..32;
		    }
		    description
			"user name identifying user";
		}

		leaf user-password {
		    type string;
		    description
			"the hash of the users password";
		}

		list user-keys {
		    key "key-name";
		    description
			"list of users pubic keys";

		    leaf key-name {
			type string;
			description
			    "A unique arbitrary name for this key";
		    }

		    leaf key-protocol {
			type string;
			description
			    "The key protocol, one of ssh-dsa,
			    ssh-edcsa, ssh-ed25519, ssh-rsa.";
		    }

		    leaf key-data {
			type string;
			description
			    "ASCII encoded data for user key.";
		    }
		}
	    }
	}
    }

    container system-state {
	config false;
	description
	    "System group operational state.";

	leaf object-id {
	    type string;
	    config false;
	    description
		"The vendor's authoritative identification of the network
		 management subsystem contained in the entity. This value
		 is allocated within the SMI enterprises subtree (1.3.6.1.4.1)
		 and provides an easy and unambiguous means for determining
		 `what kind of box' is being managed. For example, if vendor
		 `Flintstones, Inc.' was assigned the subtree 1.3.6.1.4.1.4242,
		 it could assign the identifier 1.3.6.1.4.1.4242.1.1 to its
		 `Fred Router'.";
	}

	leaf uptime {
	    type uint64;
	    description
		"The time (in hundredths of a second) since the network
		 management portion of the system was last re-initialized.";
	}

	leaf total-ram {
	    type uint64;
	    description
		"Total usable main memory size.";
	}

	leaf free-ram {
	    type uint64;
	    description
		"Available memory size.";
	}

	leaf shared-ram {
	    type uint64;
	    description
		"Shared memory size.";
	}

	leaf buffer-ram {
	    type uint64;
	    description
		"Memory used by buffers.";
	}

	leaf total-swap {
	    type uint64;
	    description
		"Total swap space allocated for this host.";
	}

	leaf free-swap {
	    type uint64;
	    description
		"Free swap space for this host.";
	}

	container platform {
	    description
		"Contains vendor-specific information for
		 identifying the system platform and operating system.";
	    reference
		"IEEE Std 1003.1-2008 - sys/utsname.h";

	    leaf os-name {
		type string;
		description
		    "The name of the operating system in use -
		     for example, 'Linux'.";
		reference
		    "IEEE Std 1003.1-2008 - utsname.sysname";
	    }

	    leaf os-release {
		type string;
		description
		    "The current release level of the operating
		     system in use.  This string MAY indicate
		     the OS source code revision.";
		reference
		    "IEEE Std 1003.1-2008 - utsname.release";
	    }

	    leaf os-version {
		type string;
		description
		    "The current version level of the operating
		     system in use.  This string MAY indicate
		     the specific OS build date and target variant
		     information.";
		reference
		    "IEEE Std 1003.1-2008 - utsname.version";
	    }

	    leaf machine {
		type string;
		description
		    "A vendor-specific identifier string representing
		     the hardware in use.";
		reference
		    "IEEE Std 1003.1-2008 - utsname.machine";
	    }
	}
    }
}
