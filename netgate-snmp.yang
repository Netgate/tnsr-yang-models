module netgate-snmp {

    yang-version 1.1;

    namespace "https://netgate.com/ns/netgate-snmp";
    prefix "ngsnmp";

    import ietf-inet-types {
	prefix "inet";
    }
    import netgate-common {
	prefix "ngcom";
    }

    organization "Netgate";

    contact "Web: <http://www.netgate.com>";

    description
	"This YANG module provides a data model for the VPP LLDP Service.

	 Copyright 2019-2020 Rubicon Communications, LLC.";

    revision 2020-02-15 {
	description
	    "TNSR Release 20.02.";
    }

    revision 2019-12-15 {
	description
	    "TNSR Release 19.12.";
    }

    revision 2019-08-30 {
	description
	    "TNSR Release 19.08.";
    }


    typedef snmp-view-type {
	type enumeration {
	    enum included;
	    enum excluded;
	}
    }

    typedef snmp-security-level {
	type enumeration {
	    enum noauth;
	    /* enum auth; */
	    /* enum priv; */
	}
    }

    typedef snmp-security-model {
	type enumeration {
	    enum any;
	    enum v1;
	    enum v2c;
	    /* enum usm; */
	    /* enum tsm; */
	    /* enum ksm; */
	}
    }

    typedef snmp-context-match {
	type enumeration {
	    enum exact;
	    /* enum prefix; */
	}
    }

    typedef snmp-source {
	    type union {
		    type enumeration { enum "default"; }
		    type inet:ipv6-prefix;
		    type inet:ipv4-prefix;
	    }
    }


    rpc snmp-control {
        input {
	    leaf operation {
	        type ngcom:service-operation;
	        mandatory true;
	        description
                    "One of the strings 'start', 'stop', 'restart',
                     or 'status'.";
	    }
        }

        output {
	    leaf stdout {
	        type string;
            }
        }
    }

    container snmp-config {
	leaf snmp-enable {
	    type boolean;
	    default "false";
	    description
		"enable the snmp daemons.";
	}

	container snmp-access-control {

	    list community-map {
		key "community-name";

		description
		    "maps community name from SNMP request to security name";

		leaf community-name {
		    type string;
		    description "community name";
		}

		list map-entry {
		    key "context source";

		    leaf context {
			type string;
			description "SNMPv3 context";
		    }

		    leaf source {
			type snmp-source;
			description "host name or IP address for source host";
		    }

		    leaf security-name {
			type string;
			mandatory true;
			description "security name";
		    }
		}
	    }

	    list group {
		key "group-name";

		description "maps security name to group";

		leaf group-name {
		    type string;
		}

		list group-entry {
		    key "security-name security-model";

		    leaf security-name {
			type string;
		    }

		    leaf security-model {
			type snmp-security-model;
		    }
		}
	    }

	    list view {
		key "view-name";

		description "defines a subset of the OID tree";

		leaf view-name {
		    type string;
		}

		list view-entry {
		    key "type oid";

		    leaf type {
			type snmp-view-type;
			description "exclude|include";
		    }

		    leaf oid {
			type string;
			mandatory true;
			description "SNMP OID";
		    }

		    leaf mask {
			type string;
		    }
		}
	    }

	    list access {
		key "group-name";

		description
		    "maps from group to views";

		leaf group-name {
		    type string;
		}

		list access-entry {
		    key "context prefix security-model security-level";

		    leaf context {
			type string;
		    }

		    leaf prefix {
			type snmp-context-match;
		    }

		    leaf security-model {
			type snmp-security-model;
		    }

		    leaf security-level {
			type snmp-security-level;
		    }

		    leaf read {
			type string;
			mandatory true;
			description "view to use for read ops";
		    }

		    leaf write {
			type string;
			mandatory true;
			description "view to use for write ops";
		    }
		}
	    }
	}
    }
}
